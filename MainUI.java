/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lab6;

import javax.swing.*;
import java.awt.*;
import java.io.*;

/**
 *
 * @author bassam
 */
public class MainUI extends JFrame {

    Point point;
    Color color, fillColor;
    Engine engine;
    int countCircle, countRect, countSquare, countLine;
    JComboBox<Shape> shapeComboBox;

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("Vector Drawing Application");
        setLocationRelativeTo(null);
        engine = new Engine();
        shapeComboBox = new JComboBox<>();
        shapeComboBox.setBounds(20, 140, 150, 30);
        add(shapeComboBox);
        setVisible(true);
        countCircle = countRect = countSquare = countLine = 0;
    }

    private void shapePosition() {
        String stX = JOptionPane.showInputDialog("Enter x coordinate:");
        String stY = JOptionPane.showInputDialog("Enter y coordinate:");
        if (checkDouble(stX) && checkDouble(stY)) {
            int x = (int) Double.parseDouble(stX);
            int y = (int) Double.parseDouble(stY);
            if (x < 0 || y < 0) {
                JOptionPane.showMessageDialog(null, "Please Enter positive numbers", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                point = new Point(x, y);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter numbers", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void shapeColor(boolean isPolygon) {
        color = JColorChooser.showDialog(this, "Select a Color", color);
        if (isPolygon) {
            fillColor = JColorChooser.showDialog(this, "Select a Fill Color", fillColor);
        }
    }

    private boolean checkDouble(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }
        try {
            Double.valueOf(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        circle = new javax.swing.JButton();
        lineSegment = new javax.swing.JButton();
        square = new javax.swing.JButton();
        rectangle = new javax.swing.JButton();
        colorize = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        canvas = new javax.swing.JPanel();
        resize = new javax.swing.JButton();
        move = new javax.swing.JButton();
        save = new javax.swing.JButton();
        load = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        circle.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        circle.setText("Circle");
        circle.setOpaque(true);
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleActionPerformed(evt);
            }
        });

        lineSegment.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        lineSegment.setText("Line Segment");
        lineSegment.setOpaque(true);
        lineSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineSegmentActionPerformed(evt);
            }
        });

        square.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        square.setText("Square");
        square.setOpaque(true);
        square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareActionPerformed(evt);
            }
        });

        rectangle.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        rectangle.setText("Rectangle");
        rectangle.setOpaque(true);
        rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleActionPerformed(evt);
            }
        });

        colorize.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        colorize.setText("Colorize");
        colorize.setOpaque(true);
        colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeActionPerformed(evt);
            }
        });

        delete.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        delete.setText("Delete");
        delete.setOpaque(true);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Shape");

        canvas.setBackground(new java.awt.Color(255, 255, 255));
        canvas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );

        resize.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        resize.setText("Resize");
        resize.setOpaque(true);
        resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeActionPerformed(evt);
            }
        });

        move.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        move.setText("Move");
        move.setOpaque(true);
        move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        save.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        save.setText("Save");
        save.setOpaque(true);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        load.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));
        load.setText("Load");
        load.setOpaque(true);
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(265, Short.MAX_VALUE)
                .addComponent(circle)
                .addGap(41, 41, 41)
                .addComponent(lineSegment)
                .addGap(45, 45, 45)
                .addComponent(square)
                .addGap(35, 35, 35)
                .addComponent(rectangle)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resize)
                            .addComponent(colorize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delete)
                            .addComponent(move)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(load)))
                .addGap(30, 30, 30)
                .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(circle)
                    .addComponent(lineSegment)
                    .addComponent(square)
                    .addComponent(rectangle))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load)
                    .addComponent(save))
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorize)
                    .addComponent(delete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resize)
                    .addComponent(move))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleActionPerformed
        shapePosition();
        shapeColor(true);
        String stradius = JOptionPane.showInputDialog("Enter radius:");
        if (checkDouble(stradius)) {
            double radius = Double.parseDouble(stradius);
            Circle circle = new Circle(point, color, fillColor, radius, ++countCircle);
            engine.addShape(circle);
            shapeComboBox.addItem(circle);
            engine.refresh(canvas.getGraphics());
        } else
            JOptionPane.showMessageDialog(null, "Please Enter a number", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_circleActionPerformed

    private void lineSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineSegmentActionPerformed
        shapePosition();
        shapeColor(false);
        String stX2 = JOptionPane.showInputDialog("Enter X2:");
        if (checkDouble(stX2)) {
            double X2 = Double.parseDouble(stX2);
            String stY2 = JOptionPane.showInputDialog("Enter Y2:");
            if (checkDouble(stY2)) {
                double Y2 = Double.parseDouble(stY2);
                LineSegment line = new LineSegment(point, color, X2, Y2, ++countLine);
                engine.addShape(line);
                shapeComboBox.addItem(line);
                engine.refresh(canvas.getGraphics());
            } else {
                JOptionPane.showMessageDialog(null, "Please Enter a number", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else
            JOptionPane.showMessageDialog(null, "Please Enter a number", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_lineSegmentActionPerformed

    private void squareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareActionPerformed
        shapePosition();
        shapeColor(true);
        String stside = JOptionPane.showInputDialog("Enter side length:");
        if (checkDouble(stside)) {
            double side = Double.parseDouble(stside);
            Square square = new Square(point, color, fillColor, side, ++countSquare);
            engine.addShape(square);
            shapeComboBox.addItem(square);
            engine.refresh(canvas.getGraphics());
        } else
            JOptionPane.showMessageDialog(null, "Please Enter a number", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_squareActionPerformed

    private void rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleActionPerformed
        shapePosition();
        shapeColor(true);
        String stwidth = JOptionPane.showInputDialog("Enter width:");
        if (checkDouble(stwidth)) {
            double width = Double.parseDouble(stwidth);
            String stheight = JOptionPane.showInputDialog("Enter height:");
            if (checkDouble(stheight)) {
                double height = Double.parseDouble(stheight);
                Rectangle rectangle = new Rectangle(point, color, fillColor, width, height, ++countRect);
                engine.addShape(rectangle);
                shapeComboBox.addItem(rectangle);
                engine.refresh(canvas.getGraphics());
            } else {
                JOptionPane.showMessageDialog(null, "Please Enter a number", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else
            JOptionPane.showMessageDialog(null, "Please Enter a number", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_rectangleActionPerformed

    private void colorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeActionPerformed
        Shape selectedShape = (Shape) shapeComboBox.getSelectedItem();
        if (selectedShape == null)
            JOptionPane.showMessageDialog(null, "No Selected Shape", "Error", JOptionPane.ERROR_MESSAGE);
        else {
            fillColor = JColorChooser.showDialog(this, "Select a Fill Color", fillColor);
            selectedShape.setFillColor(fillColor);
            engine.refresh(canvas.getGraphics());
        }
    }//GEN-LAST:event_colorizeActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        Shape selectedShape = (Shape) shapeComboBox.getSelectedItem();
        if (selectedShape == null)
            JOptionPane.showMessageDialog(null, "No Selected Shape", "Error", JOptionPane.ERROR_MESSAGE);
        else {
            engine.removeShape(selectedShape);
            shapeComboBox.removeItem(selectedShape);
            engine.refresh(canvas.getGraphics());
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void resizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeActionPerformed
        Shape selectedShape = (Shape) shapeComboBox.getSelectedItem();
        Resize resize = new Resize(selectedShape);
        resize.setVisible(true);
        engine.refresh(canvas.getGraphics());
    }//GEN-LAST:event_resizeActionPerformed

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        Shape selectedShape = (Shape) shapeComboBox.getSelectedItem();
        Move move = new Move(selectedShape);
        move.setVisible(true);
        engine.refresh(canvas.getGraphics());
    }//GEN-LAST:event_moveActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Shapes");
        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {
                oos.writeObject(engine.getShapes());
                JOptionPane.showMessageDialog(null, "Shapes saved successfully!");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error saving shapes: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
         JFileChooser fileChooser=new JFileChooser();
         fileChooser.setDialogTitle("Load Shapes");
         int selection=fileChooser.showOpenDialog(null);
         if (selection == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {
            Shape[] shapes = (Shape[]) ois.readObject();
            engine.setShapes(shapes);
            engine.refresh(canvas.getGraphics());
            for (Shape shape : shapes) {
                shapeComboBox.addItem(shape);
            }
            JOptionPane.showMessageDialog(null, "Shapes loaded successfully!");
        } catch (ClassNotFoundException | IOException e) {
            JOptionPane.showMessageDialog(null,"Error loading file: "+e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }}
    }//GEN-LAST:event_loadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvas;
    private javax.swing.JButton circle;
    private javax.swing.JButton colorize;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton lineSegment;
    private javax.swing.JButton load;
    private javax.swing.JButton move;
    private javax.swing.JButton rectangle;
    private javax.swing.JButton resize;
    private javax.swing.JButton save;
    private javax.swing.JButton square;
    // End of variables declaration//GEN-END:variables
}
